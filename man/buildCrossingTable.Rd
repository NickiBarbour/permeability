% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/buildCrossingTable.R
\name{buildCrossingTable}
\alias{buildCrossingTable}
\title{Create Crossing Table of Animal Crossings with Respect to Barrier}
\usage{
buildCrossingTable(
  permdata,
  parallel = FALSE,
  n.cores = NULL,
  n.null = 60,
  step.lengths = NULL,
  turning.angles = NULL,
  verbose = FALSE
)
}
\arguments{
\item{permdata}{object outputted from either \link{prepPermeability} or in
case of simulated data, \link{simulatePermeability}, consisting of
dataframes for the movement track(s) and barrier (\code{track} and \code{barrier}).}

\item{parallel}{whether to run function in parallel or not (recommended for
very large datasets)}

\item{n.cores}{numbers of cores to use if running in parallel.  Defaults to
80\% of the number of available cores.}

\item{n.null}{number of null steps to simulate around each observed
step - default 60}

\item{step.lengths}{vector of user-supplied step lengths (in meters) to
sample from to create null steps. Step lengths can be obtained from the
\code{permdata} and \code{track} object from \link{prepPermeability}, under the \code{L}
column. Ensure step lengths accurately represent steps that could cross the
barrier and have a large enough sample size ( >= 30). If NULL
(default), will use step lengths that cross the barrier (\code{Crossed = TRUE}
from the \code{permdata} \code{track} object). If there are < 30 steplengths that cross
the barrier or in the provided \code{step.lengths} vector, will use all
steplengths that cross the barrier (\code{step.lengths = NULL}) or the provided
vector of steplengths to fit and sample from a Weibull distribution, using
the \code{fitdistr} function from the \code{MASS} package
with a starting scale value equal to the mean steplength for steps that
cross the barrier.}

\item{turning.angles}{vector of user-supplied turning angles (in radians).
Turning angles can be obtained from the \code{permdata} and \code{track} object from
\link{prepPermeability} under the \code{Theta} column. If NULL
(default), will sample from turning angles within the buffer
(\code{In.buffer = TRUE} from the \code{permdata} \code{track} object, a.k.a the max
crossing steplength distance from the barrier.}

\item{verbose}{whether to print progress/messages or not - default TRUE}
}
\value{
Data frame with rows corresponding to each observed step in the data
and columns for: \code{ID}, \code{Step.ID} (id of the step, as output from
\link{prepPermeability}), \code{barrier.id} (id of the barrier segment that the
majority of null steps crossed), start/end location of each step
(complex, \code{Z.start}, \code{Z.end}), \code{Time} (character format), number of
null steps to cross the barrier (\code{null.crossed}), number of null
steps to NOT cross the barrier (\code{null.stayed}), whether the observed step
crossed the barrier or not (\code{crossed}), and if so, the barrier segment it
crossed at (\code{barrier.crossed}).
}
\description{
Function runs on one individual at a time and outputs one large
crossing table for all individuals. Simulates user-defined number of null
steps around each observed, actual step and determines for
all (actual and null) steps, whether each crossed the barrier or not.
Any individuals with less than 2 observations or without tracks within the
defined buffer radius of the barrier are dropped. Note that the user will
need to annotate the output crossing table from this function with their
desired covariates.
}
\examples{
require(permeability)

data("example_permdata")
data("traffic_data")

# build crossing table
example_cT <- buildCrossingTable(permdata = example_permdata,
                                 verbose = TRUE)

str(example_cT)

## add covariate data from permdata object to crossing table
### covariate specific to movement step: can merge based on step.id
trackcovariate_data <- example_permdata$track[,c("ID", "Step.ID","Season")]
example_cT2 <- merge(example_cT, trackcovariate_data, by=c("ID", "Step.ID"), 
                    all.x=TRUE)

### covariate specific to barrier segment: can merge based on barrier.id
barriercovariate_data <- example_permdata$barrier[,c("barrier.id", "km")]
example_cT3 <- merge(example_cT2, barriercovariate_data, by=c("barrier.id"), 
                     all.x=TRUE)

str(example_cT3)

## covariate representing interaction of barrier and track:
## merge by date
example_cT3$Date <- as.Date(example_cT3$Time)
example_cT4 <- merge(example_cT3, traffic_data, by = "Date", all.x = TRUE) |>
  unique()

str(example_cT4)
}
