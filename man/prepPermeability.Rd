% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prepPermeability.R
\name{prepPermeability}
\alias{prepPermeability}
\title{Format data for permeability package}
\usage{
prepPermeability(
  move.df,
  barrier,
  sample.rate,
  sample.rate.tolerance = NULL,
  buffer.m = NULL,
  barrier.covar.values = NULL,
  move.covar.names = NULL,
  move.covar.values = "start",
  plot.track = FALSE,
  verbose = FALSE,
  parallel = FALSE,
  n.cores = NULL
)
}
\arguments{
\item{move.df}{a dataframe with columns for: \code{ID}, \code{Time}
(POSIXct format, date and time), spatial coordinates (\code{X}/\code{Y} - units in
meters),
and any covariate(s)}

\item{barrier}{either an 'sf' LINESTRING or a matrix containing the spatial
coordinates (X, Y) and \code{line_id}, with a unique numeric value for each line
segment.}

\item{sample.rate}{regular desired sample rate (in hours) of input data.
This is an important assumption of the package. Steps with an irregular
sample rate will not be used to create the crossing table. It's the user's
responsibility to ensure a (mostly) regular sample rate (some missing steps
are tolerable as they simply not be used but you need enough data to
robustly estimate permeability) for their data prior
to uploading it to the package functions.}

\item{sample.rate.tolerance}{tolerance level for sample rate (in hours) -
defaults to 1 hour if \code{sample.rate.tolerance = NULL}.}

\item{buffer.m}{If NULL (default) will be set to the max distance from the
barrier observed for steps that cross. Can optionally also be set to a
user-provided value - just ensure that this value accurately reflects
the distance from the barrier within which steps have a viable possibility
of crossing.}

\item{barrier.covar.values}{a dataframe with the covariate values
for each unique segment of the barrier - default is NULL.}

\item{move.covar.names}{a vector with the name(s) of the column(s) with
covariate values for each location of the movement data - default is NULL}

\item{move.covar.values}{if covariate values are provided, a vector of the
calculations to perform to get covariate values for each step - options
include the \code{start} , \code{end}, or if numeric, optionally the
\code{mean} or \code{difference} of the start/end location values for each step.
Default is \code{start}.  To use different options for different covariates,
please provide desired values in the same order as in \code{move.covar.names}
(e.g., if you provide covars "A" and "B", and want the \code{start} for A and
\code{mean} for B, \verb{move.covar.values = c("start", "mean)}).}

\item{plot.track}{default TRUE - whether to plot each track with the given
barrier or not}

\item{verbose}{whether to print progress or not - default TRUE}

\item{parallel}{whether to run function in parallel or not (recommended for
very large datasets)}

\item{n.cores}{numbers of cores to use if running in parallel.  Defaults to
80\% of the number of available cores.}
}
\value{
\code{permdata} object, which is a list containing two "stepwise" data
frames. The output \code{track} object has rows corresponding to each observed
step in the data and columns for: \code{ID}, \code{Time}, start/end location of each
step (complex, \code{Z.start}, \code{Z.end}), the movement step (Step, complex, start
and locations of step), the time step (in hours, \code{D.time}), whether the step
was in the final buffer or not (\code{In.buffer}, TRUE/FALSE - will be FALSE also
if not at the desired sample rate), movement metrics
(step length, m - \code{L}, absolute angle, radians - \code{Phi}, relative turning
angle, radians - \code{Theta}), whether the step crossed the barrier or not
(\code{Crossed} - TRUE/FALSE), the distance of the first location in each step
from the barrier (\code{Dist_toBarrier}, in meters), and any covariate(s)
(same name as provided in original data). The output \code{barrier} has rows
corresponding to each barrier segment and columns for the complex locations
of the start and end of the barrier segments (\code{Z1} and \code{Z2}), the
id of each barrier segment (\code{barrier.id}), the line id
(\code{line_id}), and any covariate values (same names as input).
}
\description{
Function can run on 1+ individuals and will output two
dataframes, one for the barrier and one for the movement steps,
annotated with any desired covariates.
Covariate(s) can be categorical (in character format) or numeric (in numeric
format).
Users can choose whether to annotate steps with covariate values using the:
first location of the step, end location of the step, or if numeric,
the mean value across the step (mean of start/end location values).
If the covariate values are specific to the barrier, with a unique covariate
value for each barrier segment, these can be provided as a vector equal in
length to the number of barrier segments.
}
\examples{
require(permeability)

data("example_id")
data("hwy1_west")

# extract barrier coords (optional)
hwy1_west_xy <- st_coordinates(hwy1_west)
colnames(hwy1_west_xy) <- c("X","Y","line_id")

# no covariates
example_permdata <- prepPermeability(move.df = example_id,
                               barrier = hwy1_west_xy,
                               sample.rate = 8,
                               verbose = TRUE,
                               plot.track = TRUE)

str(example_permdata)

# Covariates example:

# e.g., barrier-specific covariate: km along hwy
z <- hwy1_west_xy[,1] + 1i*hwy1_west_xy[,2]

barrier_covar <- cbind(hwy1_west_xy, z) |> 
  data.frame() |>
  group_by(line_id) |>
  reframe(km = Mod(diff(z))) |>
  select(km) |>
  mutate(km = cumsum(km)/1000) |>
  data.frame()

# and movement track covariate: season
example_permdata <- prepPermeability(move.df = example_id,
                               move.covar.names = c("Season"), 
                               move.covar.values = "start",
                               barrier.covar.values = barrier_covar,
                               barrier = hwy1_west,
                               sample.rate = 8,
                               verbose = TRUE,
                               plot.track = TRUE)

# class permdata, list structure, one for track(s), one for barrier
class(example_permdata)

str(example_permdata)

# print: shows summary of data
print(example_permdata)

}
